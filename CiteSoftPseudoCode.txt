

_citations = {} #Dict of citations.
_OUTPUT_FILE_NAME = "CiteSoftwareCheckPoints.txt"
_CONSOLIDATED_FILE_NAME = "CiteSoftwareConsolidatedLog.txt"

def module_call_cite(func, unique_id, software_name, **kwargs):
    Call import_cite() to add to _citations
    Call func()

def import_cite(unique_id, software_name, **kwargs):
    Create a new dictionary containing the citation data(new_entry)
    Add every optional field from kwargs to new_entry
    Check if it already exists in the dictionary
        -If it does not, add it
        -If it does, compare existing with compare_same_id and store returned value


def compile_cite_software_log():
    For every entry in _citations, convert to YAML and append to _OUTPUT_FILE_NAME

def consolidate_software_log():
    Load/parse _OUTPUT_FILE_NAME to a dictionary
    Identify entries with same unique_id
    Resolve conflicting entries with compare_same_id()
    Convert to YAML and save/export result to _CONSOLIDATED_FILE_NAME(overwrite existing contents)


#Helper Functions

def get_timestamp():
    Get current system time from datetime module
    Parse to ISO 8601 format and return

def compare_same_id(entry1, entry2):
    Resolve to resolve case when two entries have the same unique_id
    If both are identical, doesn't matter which one is returned
    Else, return the one with later version
    -NOTE(Since version is an optional field, what to do if one or both do not have a version listed?)
